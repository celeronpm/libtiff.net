<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to read TIFF scanlines in a random fashion</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="6a59b98d-3a27-4f99-9f18-4f898cc74f75" /><meta name="Description" content="This sample shows how to read image scanlines in a random fashion." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>How to read TIFF scanlines in a random fashion</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to read image scanlines in a random fashion.</p><p /><p>To read scanlines of an image you may use one of Tiff.ReadScanline methods, but there is a catch. Images</p><p>compressed using LZW or PackBits compression scheme don't allow accessing scanlines in a random fashion. </p><p /><p>This sample shows how to avoid this limitation and access any scanline you want.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> ReadArbitraryScanlines
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">int</span> startScanline = <span class="highlight-number">10</span>;
            <span class="highlight-keyword">int</span> stopScanline = <span class="highlight-number">20</span>;

            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(<span class="highlight-literal">@"Sample Data\f-lzw.tif"</span>, <span class="highlight-literal">"r"</span>))
            {
                <span class="highlight-keyword">int</span> stride = image.ScanlineSize();
                <span class="highlight-keyword">byte</span>[] scanline = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[stride];

                Compression compression = (Compression)image.GetField(TiffTag.COMPRESSION)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">if</span> (compression == Compression.LZW || compression == Compression.PACKBITS)
                {
                    <span class="highlight-comment">// LZW and PackBits compression schemes do not allow</span>
                    <span class="highlight-comment">// scanlines to be read in a random fashion.</span>
                    <span class="highlight-comment">// So, we need to read all scanlines from start of the image.</span>

                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; startScanline; i++)
                    {
                        <span class="highlight-comment">// of course, the data won't be used.</span>
                        image.ReadScanline(scanline, i);
                    }
                }

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startScanline; i &lt; stopScanline; i++)
                {
                    image.ReadScanline(scanline, i);

                    <span class="highlight-comment">// do what ever you need with the data</span>
                }
            }
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> ReadArbitraryScanlines
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Dim</span> startScanline <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">10</span>
            <span class="highlight-keyword">Dim</span> stopScanline <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">20</span>

            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\f-lzw.tif"</span>, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = image.ScanlineSize()
                <span class="highlight-keyword">Dim</span> scanline <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(stride - <span class="highlight-number">1</span>) {}

                <span class="highlight-keyword">Dim</span> compression <span class="highlight-keyword">As</span> Compression = <span class="highlight-keyword">DirectCast</span>(image.GetField(TiffTag.COMPRESSION)(<span class="highlight-number">0</span>).ToInt(), Compression)
                <span class="highlight-keyword">If</span> compression = compression.LZW <span class="highlight-keyword">OrElse</span> compression = compression.PACKBITS <span class="highlight-keyword">Then</span>
                    <span class="highlight-comment">' LZW and PackBits compression schemes do not allow</span>
                    <span class="highlight-comment">' scanlines to be read in a random fashion.</span>
                    <span class="highlight-comment">' So, we need to read all scanlines from start of the image.</span>

                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> startScanline - <span class="highlight-number">1</span>
                        <span class="highlight-comment">' of course, the data won't be used.</span>
                        image.ReadScanline(scanline, i)
                    <span class="highlight-keyword">Next</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = startScanline <span class="highlight-keyword">To</span> stopScanline - <span class="highlight-number">1</span>

                    <span class="highlight-comment">' do what ever you need with the data</span>
                    image.ReadScanline(scanline, i)
                <span class="highlight-keyword">Next</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>