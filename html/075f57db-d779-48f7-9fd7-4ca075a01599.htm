<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Convert System.Drawing.Bitmap to a black and white TIFF</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="075f57db-d779-48f7-9fd7-4ca075a01599" /><meta name="Description" content="This sample shows how to convert a System.Drawing.Bitmap to the black&amp;white CCITT compressed TIFF image." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Convert System.Drawing.Bitmap to a black and white TIFF</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to convert a System.Drawing.Bitmap to the black&amp;white CCITT compressed TIFF image.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.Drawing.Imaging;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Runtime.InteropServices;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> ImageToBitonalTiff
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">using</span> (Bitmap bmp = <span class="highlight-keyword">new</span> Bitmap(<span class="highlight-literal">@"Sample data\rgb.jpg"</span>))
            {
                <span class="highlight-comment">// convert using WriteEncodedStrip</span>
                <span class="highlight-keyword">byte</span>[] tiffBytes = GetTiffImageBytes(bmp, <span class="highlight-keyword">false</span>);
                File.WriteAllBytes(<span class="highlight-literal">"ImageToBitonalTiff.tif"</span>, tiffBytes);

                <span class="highlight-comment">// make another conversion using WriteScanline</span>
                tiffBytes = GetTiffImageBytes(bmp, <span class="highlight-keyword">true</span>);
                File.WriteAllBytes(<span class="highlight-literal">"ImageToTiff_ByScanlines.tif"</span>, tiffBytes);

                Process.Start(<span class="highlight-literal">"ImageToBitonalTiff.tif"</span>);
            }
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">byte</span>[] GetTiffImageBytes(Bitmap img, <span class="highlight-keyword">bool</span> byScanlines)
        {
            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-keyword">byte</span>[] raster = GetImageRasterBytes(img);

                <span class="highlight-keyword">using</span> (MemoryStream ms = <span class="highlight-keyword">new</span> MemoryStream())
                {
                    <span class="highlight-keyword">using</span> (Tiff tif = Tiff.ClientOpen(<span class="highlight-literal">"InMemory"</span>, <span class="highlight-literal">"w"</span>, ms, <span class="highlight-keyword">new</span> TiffStream()))
                    {
                        <span class="highlight-keyword">if</span> (tif == <span class="highlight-keyword">null</span>)
                            <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

                        tif.SetField(TiffTag.IMAGEWIDTH, img.Width);
                        tif.SetField(TiffTag.IMAGELENGTH, img.Height);
                        tif.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4);
                        tif.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);

                        tif.SetField(TiffTag.ROWSPERSTRIP, img.Height);

                        tif.SetField(TiffTag.XRESOLUTION, img.HorizontalResolution);
                        tif.SetField(TiffTag.YRESOLUTION, img.VerticalResolution);

                        tif.SetField(TiffTag.SUBFILETYPE, <span class="highlight-number">0</span>);
                        tif.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>);
                        tif.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                        tif.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);

                        tif.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                        tif.SetField(TiffTag.T6OPTIONS, <span class="highlight-number">0</span>);
                        tif.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                        tif.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                        <span class="highlight-keyword">int</span> tiffStride = tif.ScanlineSize();
                        <span class="highlight-keyword">int</span> stride = raster.Length / img.Height;

                        <span class="highlight-keyword">if</span> (byScanlines)
                        {
                            <span class="highlight-comment">// raster stride MAY be bigger than TIFF stride (due to padding in raster bits)</span>
                            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>, offset = <span class="highlight-number">0</span>; i &lt; img.Height; i++)
                            {
                                <span class="highlight-keyword">bool</span> res = tif.WriteScanline(raster, offset, i, <span class="highlight-number">0</span>);
                                <span class="highlight-keyword">if</span> (!res)
                                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

                                offset += stride;
                            }
                        }
                        <span class="highlight-keyword">else</span>
                        {
                            <span class="highlight-keyword">if</span> (tiffStride &lt; stride)
                            {
                                <span class="highlight-comment">// raster stride is bigger than TIFF stride</span>
                                <span class="highlight-comment">// this is due to padding in raster bits</span>
                                <span class="highlight-comment">// we need to create correct TIFF strip and write it into TIFF</span>

                                <span class="highlight-keyword">byte</span>[] stripBits = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[tiffStride * img.Height];
                                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>, rasterPos = <span class="highlight-number">0</span>, stripPos = <span class="highlight-number">0</span>; i &lt; img.Height; i++)
                                {
                                    System.Buffer.BlockCopy(raster, rasterPos, stripBits, stripPos, tiffStride);
                                    rasterPos += stride;
                                    stripPos += tiffStride;
                                }

                                <span class="highlight-comment">// Write the information to the file</span>
                                <span class="highlight-keyword">int</span> n = tif.WriteEncodedStrip(<span class="highlight-number">0</span>, stripBits, stripBits.Length);
                                <span class="highlight-keyword">if</span> (n &lt;= <span class="highlight-number">0</span>)
                                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
                            }
                            <span class="highlight-keyword">else</span>
                            {
                                <span class="highlight-comment">// Write the information to the file</span>
                                <span class="highlight-keyword">int</span> n = tif.WriteEncodedStrip(<span class="highlight-number">0</span>, raster, raster.Length);
                                <span class="highlight-keyword">if</span> (n &lt;= <span class="highlight-number">0</span>)
                                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
                            }
                        }
                    }

                    <span class="highlight-keyword">return</span> ms.GetBuffer();
                }
            }
            <span class="highlight-keyword">catch</span> (Exception)
            {
                <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
            }
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">byte</span>[] GetImageRasterBytes(Bitmap img)
        {
            <span class="highlight-comment">// Specify full image</span>
            Rectangle rect = <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, img.Width, img.Height);

            Bitmap bmp = img;
            <span class="highlight-keyword">byte</span>[] bits = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Lock the managed memory</span>
                <span class="highlight-keyword">if</span> (img.PixelFormat != PixelFormat.Format1bppIndexed)
                    bmp = convertToBitonal(img);

                BitmapData bmpdata = bmp.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format1bppIndexed);

                <span class="highlight-comment">// Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[bmpdata.Stride * bmpdata.Height];

                <span class="highlight-comment">// Copy the sample values into the array.</span>
                Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length);

                <span class="highlight-comment">// Release managed memory</span>
                bmp.UnlockBits(bmpdata);
            }
            <span class="highlight-keyword">finally</span>
            {
                <span class="highlight-keyword">if</span> (bmp != img)
                    bmp.Dispose();
            }

            <span class="highlight-keyword">return</span> bits;
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Bitmap convertToBitonal(Bitmap original)
        {
            <span class="highlight-keyword">int</span> sourceStride;
            <span class="highlight-keyword">byte</span>[] sourceBuffer = extractBytes(original, <span class="highlight-keyword">out</span> sourceStride);

            <span class="highlight-comment">// Create destination bitmap</span>
            Bitmap destination = <span class="highlight-keyword">new</span> Bitmap(original.Width, original.Height,
                PixelFormat.Format1bppIndexed);

            destination.SetResolution(original.HorizontalResolution, original.VerticalResolution);

            <span class="highlight-comment">// Lock destination bitmap in memory</span>
            BitmapData destinationData = destination.LockBits(
                <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, destination.Width, destination.Height),
                ImageLockMode.WriteOnly, PixelFormat.Format1bppIndexed);

            <span class="highlight-comment">// Create buffer for destination bitmap bits</span>
            <span class="highlight-keyword">int</span> imageSize = destinationData.Stride * destinationData.Height;
            <span class="highlight-keyword">byte</span>[] destinationBuffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[imageSize];

            <span class="highlight-keyword">int</span> sourceIndex = <span class="highlight-number">0</span>;
            <span class="highlight-keyword">int</span> destinationIndex = <span class="highlight-number">0</span>;
            <span class="highlight-keyword">int</span> pixelTotal = <span class="highlight-number">0</span>;
            <span class="highlight-keyword">byte</span> destinationValue = <span class="highlight-number">0</span>;
            <span class="highlight-keyword">int</span> pixelValue = <span class="highlight-number">128</span>;
            <span class="highlight-keyword">int</span> height = destination.Height;
            <span class="highlight-keyword">int</span> width = destination.Width;
            <span class="highlight-keyword">int</span> threshold = <span class="highlight-number">500</span>;

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> y = <span class="highlight-number">0</span>; y &lt; height; y++)
            {
                sourceIndex = y * sourceStride;
                destinationIndex = y * destinationData.Stride;
                destinationValue = <span class="highlight-number">0</span>;
                pixelValue = <span class="highlight-number">128</span>;

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> x = <span class="highlight-number">0</span>; x &lt; width; x++)
                {
                    <span class="highlight-comment">// Compute pixel brightness (i.e. total of Red, Green, and Blue values)</span>
                    pixelTotal = sourceBuffer[sourceIndex + <span class="highlight-number">1</span>] + sourceBuffer[sourceIndex + <span class="highlight-number">2</span>] +
                        sourceBuffer[sourceIndex + <span class="highlight-number">3</span>];

                    <span class="highlight-keyword">if</span> (pixelTotal &gt; threshold)
                        destinationValue += (<span class="highlight-keyword">byte</span>)pixelValue;

                    <span class="highlight-keyword">if</span> (pixelValue == <span class="highlight-number">1</span>)
                    {
                        destinationBuffer[destinationIndex] = destinationValue;
                        destinationIndex++;
                        destinationValue = <span class="highlight-number">0</span>;
                        pixelValue = <span class="highlight-number">128</span>;
                    }
                    <span class="highlight-keyword">else</span>
                    {
                        pixelValue &gt;&gt;= <span class="highlight-number">1</span>;
                    }

                    sourceIndex += <span class="highlight-number">4</span>;
                }

                <span class="highlight-keyword">if</span> (pixelValue != <span class="highlight-number">128</span>)
                    destinationBuffer[destinationIndex] = destinationValue;
            }

            Marshal.Copy(destinationBuffer, <span class="highlight-number">0</span>, destinationData.Scan0, imageSize);
            destination.UnlockBits(destinationData);
            <span class="highlight-keyword">return</span> destination;
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">byte</span>[] extractBytes(Bitmap original, <span class="highlight-keyword">out</span> <span class="highlight-keyword">int</span> stride)
        {
            Bitmap source = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// If original bitmap is not already in 32 BPP, ARGB format, then convert</span>
                <span class="highlight-keyword">if</span> (original.PixelFormat != PixelFormat.Format32bppArgb)
                {
                    source = <span class="highlight-keyword">new</span> Bitmap(original.Width, original.Height, PixelFormat.Format32bppArgb);
                    source.SetResolution(original.HorizontalResolution, original.VerticalResolution);
                    <span class="highlight-keyword">using</span> (Graphics g = Graphics.FromImage(source))
                    {
                        g.DrawImageUnscaled(original, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
                    }
                }
                <span class="highlight-keyword">else</span>
                {
                    source = original;
                }

                <span class="highlight-comment">// Lock source bitmap in memory</span>
                BitmapData sourceData = source.LockBits(
                    <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, source.Width, source.Height),
                    ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);

                <span class="highlight-comment">// Copy image data to binary array</span>
                <span class="highlight-keyword">int</span> imageSize = sourceData.Stride * sourceData.Height;
                <span class="highlight-keyword">byte</span>[] sourceBuffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[imageSize];
                Marshal.Copy(sourceData.Scan0, sourceBuffer, <span class="highlight-number">0</span>, imageSize);

                <span class="highlight-comment">// Unlock source bitmap</span>
                source.UnlockBits(sourceData);

                stride = sourceData.Stride;
                <span class="highlight-keyword">return</span> sourceBuffer;
            }
            <span class="highlight-keyword">finally</span>
            {
                <span class="highlight-keyword">if</span> (source != original)
                    source.Dispose();
            }

        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.Drawing.Imaging
<span class="highlight-keyword">Imports</span> System.IO
<span class="highlight-keyword">Imports</span> System.Runtime.InteropServices

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> ImageToBitonalTiff
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Using</span> bmp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Bitmap(<span class="highlight-literal">"Sample data\rgb.jpg"</span>)
                <span class="highlight-comment">' convert using WriteEncodedStrip</span>
                <span class="highlight-keyword">Dim</span> tiffBytes <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = GetTiffImageBytes(bmp, <span class="highlight-keyword">False</span>)
                File.WriteAllBytes(<span class="highlight-literal">"ImageToBitonalTiff.tif"</span>, tiffBytes)

                <span class="highlight-comment">' make another conversion using WriteScanline</span>
                tiffBytes = GetTiffImageBytes(bmp, <span class="highlight-keyword">True</span>)
                File.WriteAllBytes(<span class="highlight-literal">"ImageToTiff_ByScanlines.tif"</span>, tiffBytes)

                Process.Start(<span class="highlight-literal">"ImageToBitonalTiff.tif"</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> GetTiffImageBytes(<span class="highlight-keyword">ByVal</span> img <span class="highlight-keyword">As</span> Bitmap, <span class="highlight-keyword">ByVal</span> byScanlines <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()
            <span class="highlight-keyword">Try</span>
                <span class="highlight-keyword">Dim</span> raster <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = GetImageRasterBytes(img)

                <span class="highlight-keyword">Using</span> ms <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> MemoryStream()
                    <span class="highlight-keyword">Using</span> tif <span class="highlight-keyword">As</span> Tiff = Tiff.ClientOpen(<span class="highlight-literal">"InMemory"</span>, <span class="highlight-literal">"w"</span>, ms, <span class="highlight-keyword">New</span> TiffStream())
                        <span class="highlight-keyword">If</span> tif <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                            <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
                        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                        tif.SetField(TiffTag.IMAGEWIDTH, img.Width)
                        tif.SetField(TiffTag.IMAGELENGTH, img.Height)
                        tif.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4)
                        tif.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)

                        tif.SetField(TiffTag.ROWSPERSTRIP, img.Height)

                        tif.SetField(TiffTag.XRESOLUTION, img.HorizontalResolution)
                        tif.SetField(TiffTag.YRESOLUTION, img.VerticalResolution)

                        tif.SetField(TiffTag.SUBFILETYPE, <span class="highlight-number">0</span>)
                        tif.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>)
                        tif.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                        tif.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)

                        tif.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                        tif.SetField(TiffTag.T6OPTIONS, <span class="highlight-number">0</span>)
                        tif.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                        tif.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                        <span class="highlight-keyword">Dim</span> tiffStride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.ScanlineSize()
                        <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = raster.Length / img.Height

                        <span class="highlight-keyword">If</span> byScanlines <span class="highlight-keyword">Then</span>
                            <span class="highlight-comment">' raster stride MAY be bigger than TIFF stride (due to padding in raster raster)</span>
                            <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
                            <span class="highlight-keyword">While</span> i &lt; img.Height
                                <span class="highlight-keyword">Dim</span> res <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = tif.WriteScanline(raster, offset, i, <span class="highlight-number">0</span>)
                                <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> res <span class="highlight-keyword">Then</span>
                                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
                                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                                offset += stride
                                i += <span class="highlight-number">1</span>
                            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
                        <span class="highlight-keyword">Else</span>
                            <span class="highlight-keyword">If</span> tiffStride &lt; stride <span class="highlight-keyword">Then</span>
                                <span class="highlight-comment">' raster stride is bigger than TIFF stride</span>
                                <span class="highlight-comment">' this is due to padding in raster bits</span>
                                <span class="highlight-comment">' we need to create correct TIFF strip and write it into TIFF</span>

                                <span class="highlight-keyword">Dim</span> stripBits <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(tiffStride * img.Height - <span class="highlight-number">1</span>) {}
                                <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, rasterPos <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, stripPos <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
                                <span class="highlight-keyword">While</span> i &lt; img.Height
                                    System.Buffer.BlockCopy(raster, rasterPos, stripBits, stripPos, tiffStride)
                                    rasterPos += stride
                                    stripPos += tiffStride
                                    i += <span class="highlight-number">1</span>
                                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

                                <span class="highlight-comment">' Write the information to the file</span>
                                <span class="highlight-keyword">Dim</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.WriteEncodedStrip(<span class="highlight-number">0</span>, stripBits, stripBits.Length)
                                <span class="highlight-keyword">If</span> n &lt;= <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
                                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                            <span class="highlight-keyword">Else</span>
                                <span class="highlight-comment">' Write the information to the file</span>
                                <span class="highlight-keyword">Dim</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.WriteEncodedStrip(<span class="highlight-number">0</span>, raster, raster.Length)
                                <span class="highlight-keyword">If</span> n &lt;= <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
                                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

                    <span class="highlight-keyword">Return</span> ms.GetBuffer()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
            <span class="highlight-keyword">Catch</span> generatedExceptionName <span class="highlight-keyword">As</span> Exception
                <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> GetImageRasterBytes(<span class="highlight-keyword">ByVal</span> img <span class="highlight-keyword">As</span> Bitmap) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()
            <span class="highlight-comment">' Specify full image</span>
            <span class="highlight-keyword">Dim</span> rect <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, img.Width, img.Height)

            <span class="highlight-keyword">Dim</span> bmp <span class="highlight-keyword">As</span> Bitmap = img
            <span class="highlight-keyword">Dim</span> bits <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span>

            <span class="highlight-keyword">Try</span>
                <span class="highlight-comment">' Lock the managed memory</span>
                <span class="highlight-keyword">If</span> img.PixelFormat &lt;&gt; PixelFormat.Format1bppIndexed <span class="highlight-keyword">Then</span>
                    bmp = convertToBitonal(img)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-keyword">Dim</span> bmpdata <span class="highlight-keyword">As</span> BitmapData = bmp.LockBits(rect, ImageLockMode.[<span class="highlight-keyword">ReadOnly</span>], PixelFormat.Format1bppIndexed)

                <span class="highlight-comment">' Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(bmpdata.Stride * bmpdata.Height - <span class="highlight-number">1</span>) {}

                <span class="highlight-comment">' Copy the sample values into the array.</span>
                Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length)

                <span class="highlight-comment">' Release managed memory</span>
                bmp.UnlockBits(bmpdata)
            <span class="highlight-keyword">Finally</span>
                <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> <span class="highlight-keyword">Object</span>.ReferenceEquals(bmp, img) <span class="highlight-keyword">Then</span>
                    bmp.Dispose()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>

            <span class="highlight-keyword">Return</span> bits
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> convertToBitonal(<span class="highlight-keyword">ByVal</span> original <span class="highlight-keyword">As</span> Bitmap) <span class="highlight-keyword">As</span> Bitmap
            <span class="highlight-keyword">Dim</span> sourceStride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
            <span class="highlight-keyword">Dim</span> sourceBuffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = extractBytes(original, sourceStride)

            <span class="highlight-comment">' Create destination bitmap</span>
            <span class="highlight-keyword">Dim</span> destination <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Bitmap(original.Width, original.Height, PixelFormat.Format1bppIndexed)

            destination.SetResolution(original.HorizontalResolution, original.VerticalResolution)

            <span class="highlight-comment">' Lock destination bitmap in memory</span>
            <span class="highlight-keyword">Dim</span> destinationData <span class="highlight-keyword">As</span> BitmapData = destination.LockBits(<span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, destination.Width, destination.Height), ImageLockMode.[<span class="highlight-keyword">WriteOnly</span>], PixelFormat.Format1bppIndexed)

            <span class="highlight-comment">' Create buffer for destination bitmap bits</span>
            <span class="highlight-keyword">Dim</span> imageSize <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = destinationData.Stride * destinationData.Height
            <span class="highlight-keyword">Dim</span> destinationBuffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(imageSize - <span class="highlight-number">1</span>) {}

            <span class="highlight-keyword">Dim</span> sourceIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
            <span class="highlight-keyword">Dim</span> destinationIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
            <span class="highlight-keyword">Dim</span> pixelTotal <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
            <span class="highlight-keyword">Dim</span> destinationValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span> = <span class="highlight-number">0</span>
            <span class="highlight-keyword">Dim</span> pixelValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">128</span>
            <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = destination.Height
            <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = destination.Width
            <span class="highlight-keyword">Dim</span> threshold <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">500</span>

            <span class="highlight-keyword">For</span> y <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                sourceIndex = y * sourceStride
                destinationIndex = y * destinationData.Stride
                destinationValue = <span class="highlight-number">0</span>
                pixelValue = <span class="highlight-number">128</span>

                <span class="highlight-keyword">For</span> x <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> width - <span class="highlight-number">1</span>
                    <span class="highlight-comment">' Compute pixel brightness (i.e. total of Red, Green, and Blue values)</span>
                    pixelTotal = <span class="highlight-keyword">CType</span>(sourceBuffer(sourceIndex + <span class="highlight-number">1</span>), <span class="highlight-keyword">Integer</span>) + <span class="highlight-keyword">CType</span>(sourceBuffer(sourceIndex + <span class="highlight-number">2</span>), <span class="highlight-keyword">Integer</span>) + <span class="highlight-keyword">CType</span>(sourceBuffer(sourceIndex + <span class="highlight-number">3</span>), <span class="highlight-keyword">Integer</span>)

                    <span class="highlight-keyword">If</span> pixelTotal &gt; threshold <span class="highlight-keyword">Then</span>
                        destinationValue += <span class="highlight-keyword">CByte</span>(pixelValue)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                    <span class="highlight-keyword">If</span> pixelValue = <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
                        destinationBuffer(destinationIndex) = destinationValue
                        destinationIndex += <span class="highlight-number">1</span>
                        destinationValue = <span class="highlight-number">0</span>
                        pixelValue = <span class="highlight-number">128</span>
                    <span class="highlight-keyword">Else</span>
                        pixelValue &gt;&gt;= <span class="highlight-number">1</span>
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                    sourceIndex += <span class="highlight-number">4</span>
                <span class="highlight-keyword">Next</span>

                <span class="highlight-keyword">If</span> pixelValue &lt;&gt; <span class="highlight-number">128</span> <span class="highlight-keyword">Then</span>
                    destinationBuffer(destinationIndex) = destinationValue
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            Marshal.Copy(destinationBuffer, <span class="highlight-number">0</span>, destinationData.Scan0, imageSize)
            destination.UnlockBits(destinationData)
            <span class="highlight-keyword">Return</span> destination
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> extractBytes(<span class="highlight-keyword">ByVal</span> original <span class="highlight-keyword">As</span> Bitmap, <span class="highlight-keyword">ByRef</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()
            <span class="highlight-keyword">Dim</span> source <span class="highlight-keyword">As</span> Bitmap = <span class="highlight-keyword">Nothing</span>

            <span class="highlight-keyword">Try</span>
                <span class="highlight-comment">' If original bitmap is not already in 32 BPP, ARGB format, then convert</span>
                <span class="highlight-keyword">If</span> original.PixelFormat &lt;&gt; PixelFormat.Format32bppArgb <span class="highlight-keyword">Then</span>
                    source = <span class="highlight-keyword">New</span> Bitmap(original.Width, original.Height, PixelFormat.Format32bppArgb)
                    source.SetResolution(original.HorizontalResolution, original.VerticalResolution)
                    <span class="highlight-keyword">Using</span> g <span class="highlight-keyword">As</span> Graphics = Graphics.FromImage(source)
                        g.DrawImageUnscaled(original, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">Else</span>
                    source = original
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-comment">' Lock source bitmap in memory</span>
                <span class="highlight-keyword">Dim</span> sourceData <span class="highlight-keyword">As</span> BitmapData = source.LockBits(<span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, source.Width, source.Height), ImageLockMode.[<span class="highlight-keyword">ReadOnly</span>], PixelFormat.Format32bppArgb)

                <span class="highlight-comment">' Copy image data to binary array</span>
                <span class="highlight-keyword">Dim</span> imageSize <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = sourceData.Stride * sourceData.Height
                <span class="highlight-keyword">Dim</span> sourceBuffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(imageSize - <span class="highlight-number">1</span>) {}
                Marshal.Copy(sourceData.Scan0, sourceBuffer, <span class="highlight-number">0</span>, imageSize)

                <span class="highlight-comment">' Unlock source bitmap</span>
                source.UnlockBits(sourceData)

                stride = sourceData.Stride
                <span class="highlight-keyword">Return</span> sourceBuffer
            <span class="highlight-keyword">Finally</span>
                <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> <span class="highlight-keyword">Object</span>.ReferenceEquals(source, original) <span class="highlight-keyword">Then</span>
                    source.Dispose()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>

        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>