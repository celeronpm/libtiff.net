<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to write TIFF tags before data (like in Cisco TIFF files)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="95e4c191-ff3e-4e11-8a10-1257a95e91f2" /><meta name="Description" content="This sample shows how to create a TIFF image with its tags saved before the image data." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>How to write TIFF tags before data (like in Cisco TIFF files)</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to create a TIFF image with its tags saved before the image data.</p><p /><p>By default, LibTiff.Net saves TIFF tags after the image data but some application or firmware</p><p>require TIFF images to have their tags saved before the image data.</p><p /><p>For example, Cisco routers require TIFF files with tags saved before the data (so called Cisco TIFF File Format).</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> WriteTagsBeforeData
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">string</span> fileName = <span class="highlight-literal">"random.tif"</span>;
            <span class="highlight-keyword">int</span> totalPages = <span class="highlight-number">3</span>;
            <span class="highlight-keyword">int</span> width = <span class="highlight-number">100</span>;
            <span class="highlight-keyword">int</span> height = <span class="highlight-number">150</span>;

            <span class="highlight-keyword">using</span> (Tiff output = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>))
            {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">short</span> page = <span class="highlight-number">0</span>; page &lt;= totalPages - <span class="highlight-number">1</span>; page++)
                {
                    <span class="highlight-keyword">if</span> (page != <span class="highlight-number">0</span>)
                    {
                        <span class="highlight-comment">// save previous directory data</span>
                        output.WriteDirectory();

                        <span class="highlight-comment">// create new directory and make it current</span>
                        output.CreateDirectory();
                        output.SetDirectory(page);
                    }

                    <span class="highlight-comment">// setup image properties</span>
                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>);
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                    output.SetField(TiffTag.ROWSPERSTRIP, height);
                    output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">88.0</span>);
                    output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">88.0</span>);
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE);
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);

                    <span class="highlight-comment">// cause tags data to be put in an image</span>
                    output.CheckpointDirectory();

                    <span class="highlight-comment">// create image data</span>
                    Random random = <span class="highlight-keyword">new</span> Random();
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt;= height - <span class="highlight-number">1</span>; i++)
                    {
                        <span class="highlight-keyword">short</span>[] samples = <span class="highlight-keyword">new</span> <span class="highlight-keyword">short</span>[width];
                        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt;= width - <span class="highlight-number">1</span>; j++)
                        {
                            samples[j] = Convert.ToInt16(random.Next(<span class="highlight-number">0</span>, <span class="highlight-keyword">short</span>.MaxValue));
                        }

                        <span class="highlight-keyword">byte</span>[] buf = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[samples.Length * <span class="highlight-number">2</span>];
                        Buffer.BlockCopy(samples, <span class="highlight-number">0</span>, buf, <span class="highlight-number">0</span>, buf.Length);
                        output.WriteScanline(buf, i);
                    }
                }
            }

            System.Diagnostics.Process.Start(fileName);
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> WriteTagsBeforeData
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Dim</span> fileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"random.tif"</span>
            <span class="highlight-keyword">Dim</span> totalPages <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
            <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span>
            <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">150</span>

            <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> Tiff = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>)

                <span class="highlight-keyword">For</span> page <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> totalPages - <span class="highlight-number">1</span>
                    <span class="highlight-keyword">If</span> page &lt;&gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                        <span class="highlight-comment">' save previous directory data</span>
                        output.WriteDirectory()

                        <span class="highlight-comment">' create new directory and make it current</span>
                        output.CreateDirectory()
                        output.SetDirectory(page)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                    <span class="highlight-comment">' setup image properties</span>
                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>)
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                    output.SetField(TiffTag.ROWSPERSTRIP, height)
                    output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">88.0</span>)
                    output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">88.0</span>)
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE)
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)

                    <span class="highlight-comment">' cause tags data to be put in an image</span>
                    output.CheckpointDirectory()

                    <span class="highlight-comment">' create image data</span>
                    <span class="highlight-keyword">Dim</span> random <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Random()
                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                        <span class="highlight-keyword">Dim</span> samples <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Short</span>(width - <span class="highlight-number">1</span>) {}
                        <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> width - <span class="highlight-number">1</span>
                            samples(j) = <span class="highlight-keyword">CShort</span>(random.[<span class="highlight-keyword">Next</span>](<span class="highlight-number">0</span>, <span class="highlight-keyword">Short</span>.MaxValue))
                        <span class="highlight-keyword">Next</span>

                        <span class="highlight-keyword">Dim</span> buf <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(samples.Length * <span class="highlight-number">2</span> - <span class="highlight-number">1</span>) {}
                        Buffer.BlockCopy(samples, <span class="highlight-number">0</span>, buf, <span class="highlight-number">0</span>, buf.Length)
                        output.WriteScanline(buf, i)
                    <span class="highlight-keyword">Next</span>
                <span class="highlight-keyword">Next</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            System.Diagnostics.Process.Start(fileName)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>