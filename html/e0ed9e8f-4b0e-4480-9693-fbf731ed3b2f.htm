<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Adding new (custom) tags</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="e0ed9e8f-4b0e-4480-9693-fbf731ed3b2f" /><meta name="Description" content="LibTiff.Net has built-in knowledge of all the standard TIFF tags, as well as extentions. The following describes how application specific tags can be used by applications without modifying LibTiff.Net." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Adding new (custom) tags</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>
                LibTiff.Net has built-in knowledge of all the standard TIFF tags, as well as
                extentions. The following describes how application specific tags can be used
                by applications without modifying LibTiff.Net.
            </p></div><div class="OH_CollapsibleAreaRegion" id="SubSection1"><div class="OH_regiontitle">TiffFieldInfo</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
                            How LibTiff.Net manages specific tags is primarily controlled by the
                            definition for that tag value stored internally as a TiffFieldInfo
                            structure. Please consult documetation for 
                            <a href="32cda987-0aca-8e33-71f0-7dd91ffe4763.htm">TiffFieldInfo</a>
                            for more details about members of this structure.
                        </p><p>
                            A TiffFieldInfo definition exists for each built-in tag in the
                            Tiff_DirInfo.cs file. Some tags which support multiple data types have
                            more than one definition, one per data type supported.
                        </p><p>
                            Two methods exist for getting the internal TiffFieldInfo
                            definitions:
                            <a href="83de3c26-ae91-6d67-2998-2217a7338952.htm">FindFieldInfo(TiffTag, TiffType)</a> and
                            <a href="b66be4cb-5a81-bd39-efd1-17f777d33f6c.htm">FindFieldInfoByName(String, TiffType)</a>.
                        </p><div class="OH_CollapsibleAreaRegion" id="SubSection2"><div class="OH_regiontitle">Default Tag Auto-registration</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
                            LibTiff.Net reads unrecognised tags automatically. When an unknown
                            tags is encountered, it is automatically internally defined with a
                            default name and a type derived from the tag value in the file.
                            Applications only need to predefine application specific tags if they
                            need to be able to set them in a file, or if particular calling
                            conventions are desired for
                            <a href="1bd1b3b8-a2ea-9d24-66ef-38ffdd33b984.htm">GetField(TiffTag)</a> and
                            <a href="87815022-38e5-9d3e-2ab5-01af3c9077ae.htm">SetField(TiffTag, <span id="LST4E8E68CB_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E8E68CB_0?cpp=array&lt;");</script>Object<span id="LST4E8E68CB_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E8E68CB_1?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a>.
                        </p><p>
                            When tags are autodefined like this the
                            <a href="13b2715c-a6e0-ff1a-f129-2cacf7ad346b.htm">ReadCount</a> and
                            <a href="97bf1749-ad05-451f-c8da-1973852453c7.htm">WriteCount</a> are always
                            <a href="54726a19-65fd-a556-82e5-69492e8afd0a.htm">Variable2</a>. The
                            <a href="aaa90240-9610-a674-b16f-567a815f7328.htm">PassCount</a> is always true, and the
                            <a href="6d13f9e2-7910-cce5-ca47-ab548ec1378d.htm">Bit</a> is
                            <a href="96714e16-bf79-dd3f-2d2c-7ff62f43c339.htm">Custom</a>. The field name will be "Tag {0}" where the
                            {0} is the tag number.
                        </p><div class="OH_CollapsibleAreaRegion" id="SubSection3"><div class="OH_regiontitle">Defining Application Tags</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
                            For various reasons, it is common for applications to want to define
                            their own tags to store information outside the core TIFF
                            specification. This is done by calling
                            <a href="2b1434fe-fc0b-35bd-4a95-0931349b23a9.htm">MergeFieldInfo(<span id="LST4E8E68CB_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E8E68CB_2?cpp=array&lt;");</script>TiffFieldInfo<span id="LST4E8E68CB_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E8E68CB_3?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32)</a> with one or more TiffFieldInfo objects.                            
                        </p><p>
                            The tags need to be defined for each TIFF file opened - and when
                            reading they should be defined before the tags of the file are read,
                            yet a valid TIFF object is needed to merge the tags against. In order
                            to get them registered at the appropriate part of the setup process,
                            it is necessary to register our merge function as an extender callback
                            with LibTiff.Net. This is done with
                            <a href="45515aaa-f023-9079-2250-af4381d5dc31.htm">SetTagExtender(Tiff<span id="LST4E8E68CB_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E8E68CB_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TiffExtendProc)</a>. It's a good idea to keep track of the previous
                            tag extender (if any) so that we can call it from our extender allowing
                            a chain of customizations to take effect.
                        </p><p>
                            The whole process is performed in following sample:
                        </p><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAAAAA_tabimgleft"> </div><div id="ID0EAAAAAAAAA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EAAAAAAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAAAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;
<span class="highlight-keyword">using</span> System.Diagnostics;

<span class="highlight-keyword">namespace</span> ReadWriteCustomTags
{
    <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_ASCIITAG = (TiffTag)<span class="highlight-number">666</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_LONGTAG = (TiffTag)<span class="highlight-number">667</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_SHORTTAG = (TiffTag)<span class="highlight-number">668</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_RATIONALTAG = (TiffTag)<span class="highlight-number">669</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_FLOATTAG = (TiffTag)<span class="highlight-number">670</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_DOUBLETAG = (TiffTag)<span class="highlight-number">671</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_BYTE = (TiffTag)<span class="highlight-number">672</span>;

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Tiff.TiffExtendProc m_parentExtender;

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TagExtender(Tiff tif)
        {
            TiffFieldInfo[] tiffFieldInfo = 
            {
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_ASCIITAG, <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span>, TiffType.ASCII, FieldBit.Custom, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">false</span>, <span class="highlight-literal">"MyTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.SHORT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ShortTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.LONG, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"LongTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.RATIONAL, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"RationalTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.FLOAT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"FloatTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.DOUBLE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"DoubleTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_BYTE, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.BYTE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ByteTag"</span>),
            };

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length);

            <span class="highlight-keyword">if</span> (m_parentExtender != <span class="highlight-keyword">null</span>)
                m_parentExtender(tif);
        }

        <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-comment">// Define an image</span>
            <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">25</span> * <span class="highlight-number">144</span>];

            <span class="highlight-comment">// Register the custom tag handler</span>
            Tiff.TiffExtendProc extender = TagExtender;
            m_parentExtender = Tiff.SetTagExtender(extender);

            <span class="highlight-keyword">string</span> outputFileName = <span class="highlight-literal">"output.tif"</span>;
            Tiff image = Tiff.Open(outputFileName, <span class="highlight-literal">"w"</span>);

            <span class="highlight-comment">// We need to set some values for basic tags before we can add any data</span>
            image.SetField(TiffTag.IMAGEWIDTH, <span class="highlight-number">25</span> * <span class="highlight-number">8</span>);
            image.SetField(TiffTag.IMAGELENGTH, <span class="highlight-number">144</span>);
            image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>);
            image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
            image.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">144</span>);

            image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4);
            image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE);
            image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
            image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

            image.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">150.0</span>);
            image.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">150.0</span>);
            image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

            <span class="highlight-comment">// set custom tags</span>

            <span class="highlight-keyword">string</span> <span class="highlight-keyword">value</span> = <span class="highlight-literal">"Tag contents"</span>;
            image.SetField(TIFFTAG_ASCIITAG, <span class="highlight-keyword">value</span>);

            <span class="highlight-keyword">short</span>[] shorts = { <span class="highlight-number">263</span>, <span class="highlight-number">264</span> };
            image.SetField(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, shorts);

            <span class="highlight-keyword">int</span>[] longs = { <span class="highlight-number">117</span>, <span class="highlight-number">118</span> };
            image.SetField(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, longs);

            <span class="highlight-keyword">float</span>[] rationals = { <span class="highlight-number">0.333333</span>f, <span class="highlight-number">0.444444</span>f };
            image.SetField(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, rationals);

            <span class="highlight-keyword">float</span>[] floats = { <span class="highlight-number">0.666666</span>f, <span class="highlight-number">0.777777</span>f };
            image.SetField(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, floats);

            <span class="highlight-keyword">double</span>[] doubles = { <span class="highlight-number">0.1234567</span>, <span class="highlight-number">0.7654321</span> };
            image.SetField(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, doubles);

            <span class="highlight-keyword">byte</span>[] bytes = { <span class="highlight-number">89</span>, <span class="highlight-number">90</span> };
            image.SetField(TIFFTAG_BYTE, <span class="highlight-number">2</span>, bytes);

            <span class="highlight-comment">// Write the information to the file</span>
            image.WriteEncodedStrip(<span class="highlight-number">0</span>, buffer, <span class="highlight-number">25</span> * <span class="highlight-number">144</span>);

            <span class="highlight-comment">// Close the file</span>
            image.Dispose();

            <span class="highlight-comment">// Now open that TIFF back and read new tags</span>
            image = Tiff.Open(outputFileName, <span class="highlight-literal">"r"</span>);
            FieldValue[] res = image.GetField(TIFFTAG_ASCIITAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">1</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToString() == <span class="highlight-keyword">value</span>);

            res = image.GetField(TIFFTAG_SHORTTAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToShortArray() != <span class="highlight-keyword">null</span>);

            res = image.GetField(TIFFTAG_LONGTAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToIntArray() != <span class="highlight-keyword">null</span>);

            res = image.GetField(TIFFTAG_RATIONALTAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);

            res = image.GetField(TIFFTAG_FLOATTAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);

            res = image.GetField(TIFFTAG_DOUBLETAG);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToDoubleArray() != <span class="highlight-keyword">null</span>);

            res = image.GetField(TIFFTAG_BYTE);
            Debug.Assert(res != <span class="highlight-keyword">null</span>);
            Debug.Assert(res.Length == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span>);
            Debug.Assert(res[<span class="highlight-number">1</span>].ToByteArray() != <span class="highlight-keyword">null</span>);

            image.Dispose();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>