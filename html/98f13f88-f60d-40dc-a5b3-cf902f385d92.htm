<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Copy and rotate TIFF data</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="98f13f88-f60d-40dc-a5b3-cf902f385d92" /><meta name="Description" content="This sample shows how to copy contents of an existing TIFF image to a new one." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Copy and rotate TIFF data</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to copy contents of an existing TIFF image to a new one.</p><p /><p>Code that can copy contents of an arbitrary TIFF file to another one is too complex to be used as a sample. This sample contains a simple code that shows basics you can start from. It works for stripped images.</p><p /><p>For more advanced code you may want to look at the TiffCP utility source code. TiffCP is designed to copy contents of an arbitrary TIFF file to another one.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Diagnostics;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> SimpleTiffCopy
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">using</span> (Tiff input = Tiff.Open(<span class="highlight-literal">@"Sample Data\flag_t24.tif"</span>, <span class="highlight-literal">"r"</span>))
            {
                <span class="highlight-keyword">int</span> width = input.GetField(TiffTag.IMAGEWIDTH)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">int</span> height = input.GetField(TiffTag.IMAGELENGTH)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">int</span> samplesPerPixel = input.GetField(TiffTag.SAMPLESPERPIXEL)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">int</span> bitsPerSample = input.GetField(TiffTag.BITSPERSAMPLE)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">int</span> photo = input.GetField(TiffTag.PHOTOMETRIC)[<span class="highlight-number">0</span>].ToInt();

                <span class="highlight-keyword">int</span> scanlineSize = input.ScanlineSize();
                <span class="highlight-keyword">byte</span>[][] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[height][];
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; height; ++i)
                {
                    buffer[i] = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[scanlineSize];
                    input.ReadScanline(buffer[i], i);
                }

                <span class="highlight-keyword">using</span> (Tiff output = Tiff.Open(<span class="highlight-literal">"SimpleTiffCopy.tif"</span>, <span class="highlight-literal">"w"</span>))
                {
                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel);
                    output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample);
                    output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(<span class="highlight-number">0</span>));
                    output.SetField(TiffTag.PHOTOMETRIC, photo);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                    <span class="highlight-comment">// change orientation of the image</span>
                    output.SetField(TiffTag.ORIENTATION, Orientation.RIGHTBOT);

                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; height; ++i)
                        output.WriteScanline(buffer[i], i);
                }
            }

            Process.Start(<span class="highlight-literal">"SimpleTiffCopy.tif"</span>);
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System.Diagnostics

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> SimpleTiffCopy
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Using</span> input <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\flag_t24.tif"</span>, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.GetField(TiffTag.IMAGEWIDTH)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.GetField(TiffTag.IMAGELENGTH)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> samplesPerPixel <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.GetField(TiffTag.SAMPLESPERPIXEL)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> bitsPerSample <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.GetField(TiffTag.BITSPERSAMPLE)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> photo <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.GetField(TiffTag.PHOTOMETRIC)(<span class="highlight-number">0</span>).ToInt()

                <span class="highlight-keyword">Dim</span> scanlineSize <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = input.ScanlineSize()
                <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(height - <span class="highlight-number">1</span>)() {}
                <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                    buffer(i) = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(scanlineSize - <span class="highlight-number">1</span>) {}
                    input.ReadScanline(buffer(i), i)
                <span class="highlight-keyword">Next</span>

                <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"SimpleTiffCopy.tif"</span>, <span class="highlight-literal">"w"</span>)
                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel)
                    output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample)
                    output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(<span class="highlight-number">0</span>))
                    output.SetField(TiffTag.PHOTOMETRIC, photo)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                    <span class="highlight-comment">' change orientation of the image</span>
                    output.SetField(TiffTag.ORIENTATION, Orientation.RIGHTBOT)

                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                        output.WriteScanline(buffer(i), i)
                    <span class="highlight-keyword">Next</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            Process.Start(<span class="highlight-literal">"SimpleTiffCopy.tif"</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>