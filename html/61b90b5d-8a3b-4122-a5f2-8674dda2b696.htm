<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Read and write custom TIFF tags</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="61b90b5d-8a3b-4122-a5f2-8674dda2b696" /><meta name="Description" content="This sample shows how to read and write custom TIFF tags." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Read and write custom TIFF tags</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to read and write custom TIFF tags.</p><p /><p>Custom tags are tags unknown to the library. However, they may be read from a file or written to a file without problems. Special "extender callback" method should be used to instruct the library about format, names and other properties of such tags.</p><p /><p>This sample shows how to create "extender callback" method, register that method with the library and use Tiff.MergeFieldInfo to merge description of your custom tags with other tags description. After that custom tags can be read or written as usual.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Windows.Forms;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> ReadWriteCustomTags
    {
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_ASCIITAG = (TiffTag)<span class="highlight-number">666</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_LONGTAG = (TiffTag)<span class="highlight-number">667</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_SHORTTAG = (TiffTag)<span class="highlight-number">668</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_RATIONALTAG = (TiffTag)<span class="highlight-number">669</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_FLOATTAG = (TiffTag)<span class="highlight-number">670</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_DOUBLETAG = (TiffTag)<span class="highlight-number">671</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_BYTETAG = (TiffTag)<span class="highlight-number">672</span>;

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Tiff.TiffExtendProc m_parentExtender;

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TagExtender(Tiff tif)
        {
            TiffFieldInfo[] tiffFieldInfo = 
            {
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_ASCIITAG, TiffFieldInfo.Variable, TiffFieldInfo.Variable, 
                      TiffType.ASCII, FieldBit.Custom, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">false</span>, <span class="highlight-literal">"MyTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.SHORT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ShortTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.LONG, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"LongTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.RATIONAL, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"RationalTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.FLOAT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"FloatTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.DOUBLE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"DoubleTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.BYTE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ByteTag"</span>),
            };

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length);

            <span class="highlight-keyword">if</span> (m_parentExtender != <span class="highlight-keyword">null</span>)
                m_parentExtender(tif);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Define an image</span>
            <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">25</span> * <span class="highlight-number">144</span>];

            <span class="highlight-comment">// Register the extender callback</span>
            <span class="highlight-comment">// It's a good idea to keep track of the previous tag extender (if any) so that we can call it</span>
            <span class="highlight-comment">// from our extender allowing a chain of customizations to take effect.</span>
            m_parentExtender = Tiff.SetTagExtender(TagExtender);

            <span class="highlight-keyword">string</span> outputFileName = writeTiffWithCustomTags(buffer);
            readCustomTags(outputFileName);

            <span class="highlight-comment">// restore previous tag extender</span>
            Tiff.SetTagExtender(m_parentExtender);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> writeTiffWithCustomTags(<span class="highlight-keyword">byte</span>[] buffer)
        {
            <span class="highlight-keyword">string</span> outputFileName = <span class="highlight-literal">"output.tif"</span>;
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(outputFileName, <span class="highlight-literal">"w"</span>))
            {
                <span class="highlight-comment">// set up some basic tags before adding data</span>
                image.SetField(TiffTag.IMAGEWIDTH, <span class="highlight-number">25</span> * <span class="highlight-number">8</span>);
                image.SetField(TiffTag.IMAGELENGTH, <span class="highlight-number">144</span>);
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>);
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                image.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">144</span>);

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                image.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">150.0</span>);
                image.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">150.0</span>);
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                <span class="highlight-comment">// set custom tags</span>

                <span class="highlight-keyword">string</span> <span class="highlight-keyword">value</span> = <span class="highlight-literal">"Tag contents"</span>;
                image.SetField(TIFFTAG_ASCIITAG, <span class="highlight-keyword">value</span>);

                <span class="highlight-keyword">short</span>[] shorts = { <span class="highlight-number">263</span>, <span class="highlight-number">264</span> };
                image.SetField(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, shorts);

                <span class="highlight-keyword">int</span>[] longs = { <span class="highlight-number">117</span>, <span class="highlight-number">118</span> };
                image.SetField(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, longs);

                <span class="highlight-keyword">float</span>[] rationals = { <span class="highlight-number">0.333333</span>f, <span class="highlight-number">0.444444</span>f };
                image.SetField(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, rationals);

                <span class="highlight-keyword">float</span>[] floats = { <span class="highlight-number">0.666666</span>f, <span class="highlight-number">0.777777</span>f };
                image.SetField(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, floats);

                <span class="highlight-keyword">double</span>[] doubles = { <span class="highlight-number">0.1234567</span>, <span class="highlight-number">0.7654321</span> };
                image.SetField(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, doubles);

                <span class="highlight-keyword">byte</span>[] bytes = { <span class="highlight-number">89</span>, <span class="highlight-number">90</span> };
                image.SetField(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, bytes);

                <span class="highlight-comment">// Write the information to the file</span>
                image.WriteEncodedStrip(<span class="highlight-number">0</span>, buffer, <span class="highlight-number">25</span> * <span class="highlight-number">144</span>);
            }
            <span class="highlight-keyword">return</span> outputFileName;
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> readCustomTags(<span class="highlight-keyword">string</span> outputFileName)
        {
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> messageFormat = <span class="highlight-literal">"{0} is read ok: {1}\n"</span>;
            StringBuilder result = <span class="highlight-keyword">new</span> StringBuilder();

            <span class="highlight-comment">// Now open that TIFF back and read new tags</span>
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(outputFileName, <span class="highlight-literal">"r"</span>))
            {
                FieldValue[] res = image.GetField(TIFFTAG_ASCIITAG);
                <span class="highlight-keyword">bool</span> tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">1</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToString() == <span class="highlight-literal">"Tag contents"</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"MyTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_SHORTTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToShortArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ShortTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_LONGTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToIntArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"LongTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_RATIONALTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"RationalTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_FLOATTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"FloatTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_DOUBLETAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"DoubleTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_BYTETAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToByteArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ByteTag"</span>, tagOk);
            }

            MessageBox.Show(result.ToString());
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Microsoft.VisualBasic
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Text
<span class="highlight-keyword">Imports</span> System.Windows.Forms

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> ReadWriteCustomTags
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_ASCIITAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">666</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_LONGTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">667</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_SHORTTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">668</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_RATIONALTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">669</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_FLOATTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">670</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_DOUBLETAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">671</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_BYTETAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">672</span>, TiffTag)

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> m_parentExtender <span class="highlight-keyword">As</span> Tiff.TiffExtendProc

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> TagExtender(<span class="highlight-keyword">ByVal</span> tif <span class="highlight-keyword">As</span> Tiff)
            <span class="highlight-keyword">Dim</span> info <span class="highlight-keyword">As</span> TiffFieldInfo() = {<span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_ASCIITAG, TiffFieldInfo.Variable, _
             TiffFieldInfo.Variable, TiffType.ASCII, FieldBit.[Custom], <span class="highlight-keyword">True</span>, <span class="highlight-keyword">False</span>, <span class="highlight-literal">"MyTag"</span>), _
             <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">SHORT</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"ShortTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">LONG</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"LongTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.RATIONAL, FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"RationalTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.FLOAT, FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"FloatTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">DOUBLE</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"DoubleTag"</span>), _
             <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">BYTE</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"ByteTag"</span>)}

            tif.MergeFieldInfo(info, info.Length)

            <span class="highlight-keyword">If</span> m_parentExtender <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                m_parentExtender.Invoke(tif)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-comment">' Define an image</span>
            <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(<span class="highlight-number">25</span> * <span class="highlight-number">144</span> - <span class="highlight-number">1</span>) {}

            <span class="highlight-comment">' Register the extender callback</span>
            <span class="highlight-comment">' It's a good idea to keep track of the previous tag extender (if any) so that we can call it</span>
            <span class="highlight-comment">' from our extender allowing a chain of customizations to take effect.</span>
            m_parentExtender = Tiff.SetTagExtender(<span class="highlight-keyword">AddressOf</span> TagExtender)

            <span class="highlight-keyword">Dim</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = writeTiffWithCustomTags(buffer)
            readCustomTags(outputFileName)

            <span class="highlight-comment">' restore previous tag extender</span>
            Tiff.SetTagExtender(m_parentExtender)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> writeTiffWithCustomTags(<span class="highlight-keyword">ByVal</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()) <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
            <span class="highlight-keyword">Dim</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"output.tif"</span>
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(outputFileName, <span class="highlight-literal">"w"</span>)
                <span class="highlight-comment">' set up some basic tags before adding data</span>
                image.SetField(TiffTag.IMAGEWIDTH, <span class="highlight-number">25</span> * <span class="highlight-number">8</span>)
                image.SetField(TiffTag.IMAGELENGTH, <span class="highlight-number">144</span>)
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>)
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                image.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">144</span>)

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                image.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">150.0</span>)
                image.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">150.0</span>)
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                <span class="highlight-comment">' set custom tags</span>

                <span class="highlight-keyword">Dim</span> value <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"Tag contents"</span>
                image.SetField(TIFFTAG_ASCIITAG, value)

                <span class="highlight-keyword">Dim</span> shorts <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span>() = {<span class="highlight-number">263</span>, <span class="highlight-number">264</span>}
                image.SetField(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, shorts)

                <span class="highlight-keyword">Dim</span> longs <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>() = {<span class="highlight-number">117</span>, <span class="highlight-number">118</span>}
                image.SetField(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, longs)

                <span class="highlight-keyword">Dim</span> rationals <span class="highlight-keyword">As</span> <span class="highlight-keyword">Single</span>() = {<span class="highlight-number">0.333333</span>F, <span class="highlight-number">0.444444</span>F}
                image.SetField(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, rationals)

                <span class="highlight-keyword">Dim</span> floats <span class="highlight-keyword">As</span> <span class="highlight-keyword">Single</span>() = {<span class="highlight-number">0.666666</span>F, <span class="highlight-number">0.777777</span>F}
                image.SetField(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, floats)

                <span class="highlight-keyword">Dim</span> doubles <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>() = {<span class="highlight-number">0.1234567</span>, <span class="highlight-number">0.7654321</span>}
                image.SetField(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, doubles)

                <span class="highlight-keyword">Dim</span> bytes <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = {<span class="highlight-number">89</span>, <span class="highlight-number">90</span>}
                image.SetField(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, bytes)

                <span class="highlight-comment">' Write the information to the file</span>
                image.WriteEncodedStrip(<span class="highlight-number">0</span>, buffer, <span class="highlight-number">25</span> * <span class="highlight-number">144</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
            <span class="highlight-keyword">Return</span> outputFileName
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> readCustomTags(<span class="highlight-keyword">ByVal</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>)
            <span class="highlight-keyword">Const</span> messageFormat <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"{0} is read ok: {1}"</span> &amp; vbCrLf
            <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()

            <span class="highlight-comment">' Now open that TIFF back and read new tags</span>
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(outputFileName, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> res <span class="highlight-keyword">As</span> FieldValue() = image.GetField(TIFFTAG_ASCIITAG)
                <span class="highlight-keyword">Dim</span> tagOk <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">1</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToString() = <span class="highlight-literal">"Tag contents"</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"MyTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_SHORTTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToShortArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ShortTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_LONGTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToIntArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"LongTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_RATIONALTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"RationalTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_FLOATTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"FloatTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_DOUBLETAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"DoubleTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_BYTETAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToByteArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ByteTag"</span>, tagOk)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            MessageBox.Show(result.ToString())
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>