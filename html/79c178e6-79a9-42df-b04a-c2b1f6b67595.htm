<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to use a custom TiffStream to read or write TIFF images</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="79c178e6-79a9-42df-b04a-c2b1f6b67595" /><meta name="Description" content="This sample shows how to use a custom TiffStream to read and write TIFF images." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>How to use a custom TiffStream to read or write TIFF images</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to use a custom TiffStream to read and write TIFF images.</p><p /><p>Sometimes you may want to read or write TIFF images stored in an unusial places like byte buffers.</p><p>In such cases a custom TiffStream and ClientOpen method may help you.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> UsingCustomTiffStream
    {
        <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
        {
            MyStream stream = <span class="highlight-keyword">new</span> MyStream();

            <span class="highlight-comment">// Open the TIFF image for reading</span>
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.ClientOpen(<span class="highlight-literal">"custom"</span>, <span class="highlight-literal">"r"</span>, <span class="highlight-keyword">null</span>, stream))
            {
                <span class="highlight-keyword">if</span> (image == <span class="highlight-keyword">null</span>)
                    <span class="highlight-keyword">return</span>;

                <span class="highlight-comment">// Read image data here the same way</span>
                <span class="highlight-comment">// as if LibTiff.Net was using regular image file</span>
                image.Close();
            }
        }

        <span class="highlight-comment">/// &lt;summary&gt;</span>
        <span class="highlight-comment">/// Custom stream for LibTiff.Net.</span>
        <span class="highlight-comment">/// Please consult documentation for TiffStream class for method parameters meaning.</span>
        <span class="highlight-comment">/// &lt;/summary&gt;</span>
        <span class="highlight-keyword">class</span> MyStream : TiffStream
        {
            <span class="highlight-comment">// You may implement any constructor you want here.</span>

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">int</span> Read(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">byte</span>[] buffer, <span class="highlight-keyword">int</span> offset, <span class="highlight-keyword">int</span> count)
            {
                <span class="highlight-comment">// stub implementation</span>
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Write(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">byte</span>[] buffer, <span class="highlight-keyword">int</span> offset, <span class="highlight-keyword">int</span> count)
            {
                <span class="highlight-comment">// stub implementation</span>
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">long</span> Seek(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">long</span> offset, System.IO.SeekOrigin whence)
            {
                <span class="highlight-comment">// stub implementation</span>
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Close(<span class="highlight-keyword">object</span> clientData)
            {
                <span class="highlight-comment">// stub implementation</span>
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">long</span> Size(<span class="highlight-keyword">object</span> clientData)
            {
                <span class="highlight-comment">// stub implementation</span>
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> UsingCustomTiffStream
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Dim</span> stream <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> MyStream()

            <span class="highlight-comment">' Open the TIFF image for reading</span>
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.ClientOpen(<span class="highlight-literal">"custom"</span>, <span class="highlight-literal">"r"</span>, <span class="highlight-keyword">Nothing</span>, stream)
                <span class="highlight-keyword">If</span> image <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Return</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-comment">' Read image data here the same way</span>
                <span class="highlight-comment">' as if LibTiff.Net was using regular image file</span>
                image.Close()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

        <span class="highlight-comment">''' &lt;summary&gt;</span>
        <span class="highlight-comment">''' Custom stream for LibTiff.Net.</span>
        <span class="highlight-comment">''' Please consult documentation for TiffStream class for method parameters meaning.</span>
        <span class="highlight-comment">''' &lt;/summary&gt;</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> MyStream
            <span class="highlight-keyword">Inherits</span> TiffStream
            <span class="highlight-comment">' You may implement any constructor you want here.</span>

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Read(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
                <span class="highlight-comment">' stub implementation</span>
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Write(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>)
                <span class="highlight-comment">' stub implementation</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Seek(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span>, whence <span class="highlight-keyword">As</span> System.IO.SeekOrigin) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span>
                <span class="highlight-comment">' stub implementation</span>
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Close(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>)
                <span class="highlight-comment">' stub implementation</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Size(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span>
                <span class="highlight-comment">' stub implementation</span>
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>