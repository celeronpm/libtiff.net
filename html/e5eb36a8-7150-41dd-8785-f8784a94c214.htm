<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Add page to existing TIFF</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="e5eb36a8-7150-41dd-8785-f8784a94c214" /><meta name="Description" content="This sample shows how to add new page to existing TIFF." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Add page to existing TIFF</h1></td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="introduction"><p>This sample shows how to add new page to existing TIFF.</p><p /><p>In this sample we open existing TIFF and add new page to it. The page contents is the page number.</p></div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDAAAA_tabimgleft"> </div><div id="ID0EDAAAA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cs','1','4');return false;">C#</a></div><div id="ID0EDAAAA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','vb','2','4');return false;">VB</a></div><div id="ID0EDAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDAAAA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDAAAA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDAAAA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.Drawing.Imaging;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> AddPageToTiff
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            File.Copy(<span class="highlight-literal">@"Sample Data\16bit.tif"</span>, <span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-keyword">true</span>);

            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(<span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-literal">"a"</span>))
            {
                <span class="highlight-keyword">int</span> newPageNumber = image.NumberOfDirectories() + <span class="highlight-number">1</span>;
                <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> width = <span class="highlight-number">100</span>;
                <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> height = <span class="highlight-number">100</span>;

                image.SetField(TiffTag.IMAGEWIDTH, width);
                image.SetField(TiffTag.IMAGELENGTH, height);
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">8</span>);
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">3</span>);
                image.SetField(TiffTag.ROWSPERSTRIP, height);

                image.SetField(TiffTag.COMPRESSION, Compression.LZW);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">null</span>;
                <span class="highlight-keyword">using</span> (Bitmap bmp = <span class="highlight-keyword">new</span> Bitmap(width, height, PixelFormat.Format24bppRgb))
                {
                    <span class="highlight-keyword">using</span> (Graphics g = Graphics.FromImage(bmp))
                    {
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds);
                        <span class="highlight-keyword">string</span> s = newPageNumber.ToString();
                        Font f = SystemFonts.DefaultFont;

                        SizeF size = g.MeasureString(s, f);
                        PointF loc = <span class="highlight-keyword">new</span> PointF(Math.Max((bmp.Width - size.Width) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>), Math.Max((bmp.Height - size.Height) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>));
                        g.DrawString(s, f, Brushes.Black, loc);

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb);
                    }
                }

                <span class="highlight-keyword">int</span> stride = buffer.Length / height;
                convertRGBSamples(buffer, width, height);

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>, offset = <span class="highlight-number">0</span>; i &lt; height; i++)
                {
                    image.WriteScanline(buffer, offset, i, <span class="highlight-number">0</span>);
                    offset += stride;
                }
            }

            Process.Start(<span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">byte</span>[] getImageRasterBytes(Bitmap bmp, PixelFormat format)
        {
            Rectangle rect = <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, bmp.Width, bmp.Height);
            <span class="highlight-keyword">byte</span>[] bits = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Lock the managed memory</span>
                BitmapData bmpdata = bmp.LockBits(rect, ImageLockMode.ReadWrite, format);

                <span class="highlight-comment">// Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[bmpdata.Stride * bmpdata.Height];

                <span class="highlight-comment">// Copy the values into the array.</span>
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length);

                <span class="highlight-comment">// Release managed memory</span>
                bmp.UnlockBits(bmpdata);
            }
            <span class="highlight-keyword">catch</span>
            {
                <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
            }

            <span class="highlight-keyword">return</span> bits;
        }

        <span class="highlight-comment">/// &lt;summary&gt;</span>
        <span class="highlight-comment">/// Converts BGR samples into RGB samples</span>
        <span class="highlight-comment">/// &lt;/summary&gt;</span>
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> convertRGBSamples(<span class="highlight-keyword">byte</span>[] data, <span class="highlight-keyword">int</span> width, <span class="highlight-keyword">int</span> height)
        {
            <span class="highlight-keyword">int</span> stride = data.Length / height;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> samplesPerPixel = <span class="highlight-number">3</span>;

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> y = <span class="highlight-number">0</span>; y &lt; height; y++)
            {
                <span class="highlight-keyword">int</span> offset = stride * y;
                <span class="highlight-keyword">int</span> strideEnd = offset + width * samplesPerPixel;

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = offset; i &lt; strideEnd; i += samplesPerPixel)
                {
                    <span class="highlight-keyword">byte</span> temp = data[i + <span class="highlight-number">2</span>];
                    data[i + <span class="highlight-number">2</span>] = data[i];
                    data[i] = temp;
                }
            }
        }
    }
}</pre></div><div id="ID0EDAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.Drawing.Imaging
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> AddPageToTiff
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            File.Copy(<span class="highlight-literal">"Sample Data\16bit.tif"</span>, <span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-keyword">True</span>)

            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-literal">"a"</span>)
                <span class="highlight-keyword">Dim</span> newPageNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = image.NumberOfDirectories() + <span class="highlight-number">1</span>
                <span class="highlight-keyword">Const</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span>
                <span class="highlight-keyword">Const</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span>

                image.SetField(TiffTag.IMAGEWIDTH, width)
                image.SetField(TiffTag.IMAGELENGTH, height)
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">8</span>)
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">3</span>)
                image.SetField(TiffTag.ROWSPERSTRIP, height)

                image.SetField(TiffTag.COMPRESSION, Compression.LZW)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span>
                <span class="highlight-keyword">Using</span> bmp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Bitmap(width, height, PixelFormat.Format24bppRgb)
                    <span class="highlight-keyword">Using</span> g <span class="highlight-keyword">As</span> Graphics = Graphics.FromImage(bmp)
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds)
                        <span class="highlight-keyword">Dim</span> s <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = newPageNumber.ToString()
                        <span class="highlight-keyword">Dim</span> f <span class="highlight-keyword">As</span> Font = SystemFonts.DefaultFont

                        <span class="highlight-keyword">Dim</span> size <span class="highlight-keyword">As</span> SizeF = g.MeasureString(s, f)
                        <span class="highlight-keyword">Dim</span> loc <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PointF(Math.Max((bmp.Width - size.Width) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>), Math.Max((bmp.Height - size.Height) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>))
                        g.DrawString(s, f, Brushes.Black, loc)

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

                <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = buffer.Length \ height
                convertRGBSamples(buffer, width, height)

                <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
                <span class="highlight-keyword">While</span> i &lt; height
                    image.WriteScanline(buffer, offset, i, <span class="highlight-number">0</span>)
                    offset += stride
                    i += <span class="highlight-number">1</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            Process.Start(<span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> getImageRasterBytes(<span class="highlight-keyword">ByVal</span> bmp <span class="highlight-keyword">As</span> Bitmap, <span class="highlight-keyword">ByVal</span> format <span class="highlight-keyword">As</span> PixelFormat) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()
            <span class="highlight-keyword">Dim</span> rect <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, bmp.Width, bmp.Height)
            <span class="highlight-keyword">Dim</span> bits <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span>

            <span class="highlight-keyword">Try</span>
                <span class="highlight-comment">' Lock the managed memory</span>
                <span class="highlight-keyword">Dim</span> bmpdata <span class="highlight-keyword">As</span> BitmapData = bmp.LockBits(rect, ImageLockMode.ReadWrite, format)

                <span class="highlight-comment">' Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(bmpdata.Stride * bmpdata.Height - <span class="highlight-number">1</span>) {}

                <span class="highlight-comment">' Copy the values into the array.</span>
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length)

                <span class="highlight-comment">' Release managed memory</span>
                bmp.UnlockBits(bmpdata)
            <span class="highlight-keyword">Catch</span>
                <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>

            <span class="highlight-keyword">Return</span> bits
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

        <span class="highlight-comment">''' &lt;summary&gt;</span>
        <span class="highlight-comment">''' Converts BGR samples into RGB samples</span>
        <span class="highlight-comment">''' &lt;/summary&gt;</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> convertRGBSamples(<span class="highlight-keyword">ByVal</span> data <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), <span class="highlight-keyword">ByVal</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, <span class="highlight-keyword">ByVal</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>)
            <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = data.Length \ height
            <span class="highlight-keyword">Const</span> samplesPerPixel <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>

            <span class="highlight-keyword">For</span> y <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                <span class="highlight-keyword">Dim</span> offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = stride * y
                <span class="highlight-keyword">Dim</span> strideEnd <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = offset + width * samplesPerPixel

                <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = offset
                <span class="highlight-keyword">While</span> i &lt; strideEnd
                    <span class="highlight-keyword">Dim</span> temp <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span> = data(i + <span class="highlight-number">2</span>)
                    data(i + <span class="highlight-number">2</span>) = data(i)
                    data(i) = temp
                    i += samplesPerPixel
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EDAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAAAA");</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://www.bitmiracle.com/libtiff" target="_blank">Copyright © 2008-2013 Bit Miracle. All rights reserved.</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40bitmiracle.com?Subject=LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.">support@bitmiracle.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>